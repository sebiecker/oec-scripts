name: Release
on:
  workflow_dispatch:
    inputs:
      integration:
        description: 'Integration'     
        required: true
      oec-version:
        description: 'Version of OEC'
        required: true
jobs:
  setup:
    name: Setup For ${{ github.event.inputs.integration }} Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{  steps.create_release.outputs.upload_url }}
      integration_name: ${{  steps.gather_params.outputs.INTEGRATION_NAME }}
      integration_version: ${{  steps.gather_params.outputs.INTEGRATION_VERSION }}
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Retrieve Integration Version
      id: gather_params
      run: |
        echo ::set-output name=INTEGRATION_VERSION::$(jq -r --arg v "${{ github.event.inputs.integration }}" '.[$v]' release/oec-builder/oecScriptsVersion.json)
        echo ::set-output name=INTEGRATION_NAME::$(echo "${{ github.event.inputs.integration }}" | awk '{print tolower($0)}')
    - name: Create ${{ github.event.inputs.integration }} Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        INTEGRATION_VERSION: ${{ steps.gather_params.outputs.INTEGRATION_VERSION }}
        INTEGRATION_NAME: ${{ github.event.inputs.integration }}
      with:
        tag_name: ${{ env.INTEGRATION_NAME }}-${{ env.INTEGRATION_VERSION }}_oec-${{ github.event.inputs.oec-version }}
        release_name: ${{ env.INTEGRATION_NAME }}-${{ env.INTEGRATION_VERSION }}_oec-${{ github.event.inputs.oec-version }}
        draft: true
  linux:
    name: Linux
    runs-on: ubuntu-latest
    needs: [setup]
    env:
      INTEGRATION_NAME: ${{ needs.setup.outputs.integration_name }}
      INTEGRATION_VERSION: ${{ needs.setup.outputs.integration_version }}
      INTEGRATION_FOLDER: opsgenie-${{ needs.setup.outputs.integration_name }}-${{ needs.setup.outputs.integration_version }}-linux-amd64
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.7
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Create Output Directory
      run: mkdir -p .release/oec-linux/${{ env.INTEGRATION_FOLDER }}
    - name: Download Asset
      uses: i3h/download-release-asset@v1.2.0
      with:
        owner: opsgenie
        repo: oec
        tag: ${{ github.event.inputs.oec-version }}
        file: oec-linux-amd64-${{ github.event.inputs.oec-version }}.zip
    - name: Extracting Linux Package
      run: unzip -qq oec-linux-amd64-${{ github.event.inputs.oec-version }}.zip -d .release/oec-linux/${{ env.INTEGRATION_FOLDER }}
    - name: Copy Integration Files
      run: cp -R ${{ github.event.inputs.integration }}/. .release/oec-linux/${{ env.INTEGRATION_FOLDER }}
    - name: Remove http script (todo remove when http version is released)
      run: rm -f .release/oec-linux/${{ env.INTEGRATION_FOLDER }}/scripts/http.py
    - name: Compressing Linux Package
      run: |
          cd .release/oec-linux/
          zip -r opsgenie-${{ env.INTEGRATION_NAME }}-${{ env.INTEGRATION_VERSION }}-linux-amd64.zip ./${{ env.INTEGRATION_FOLDER }}
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Linux Artifact
        path: .release/oec-linux/*.zip
    - name: Upload
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.setup.outputs.upload_url }}
        asset_path: .release/oec-linux/opsgenie-${{ env.INTEGRATION_NAME }}-${{ env.INTEGRATION_VERSION }}-linux-amd64.zip
        asset_name: opsgenie-${{ env.INTEGRATION_NAME }}-${{ env.INTEGRATION_VERSION }}-linux-amd64.zip
        asset_content_type: application/zip
  rpm:
    name: RPM
    runs-on: ubuntu-latest
    needs: [setup]
    env:
      INTEGRATION_NAME: ${{ needs.setup.outputs.integration_name }}
      INTEGRATION_VERSION: ${{ needs.setup.outputs.integration_version }}
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.7
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Create Output Directory
      run: mkdir -p .release/oec-rpm
    - name: Download Asset
      uses: i3h/download-release-asset@v1.2.0
      with:
        owner: opsgenie
        repo: oec
        tag: ${{ github.event.inputs.oec-version }}
        file: oec-linux-amd64-${{ github.event.inputs.oec-version }}.zip
    - name: Extracting Linux Package
      run: unzip -qq oec-linux-amd64-${{ github.event.inputs.oec-version }}.zip -d .release/oec-rpm
    - name: Copy SPEC Files
      run: cp -R release/oec-builder/oec-rpm/. .release/oec-rpm
    - name: Copy Integration Files
      run: cp -R ${{ github.event.inputs.integration }}/. .release/oec-rpm/oec-scripts
    - name: Create RPM Package 
      working-directory: .release/oec-rpm
      run: |
        sed -i "s|<path_of_script>|$RPM_BUILD_ROOT/home/opsgenie/oec/scripts/actionExecutor.py|" oec-scripts/conf/config.json
        sed -i "s|<path_of_output_file_of_script>|$RPM_BUILD_ROOT/home/opsgenie/oec/output/output.txt|" oec-scripts/conf/config.json
        sed -i "s/<local | git>/local/g" oec-scripts/conf/config.json

        sed -i "s/%VERSION%/${INTEGRATION_VERSION}/g" SPECS/oec.spec

        sed -i "s/%INTEGRATION%/opsgenie-${INTEGRATION_NAME}/g" SPECS/oec.spec

        rpmbuild --target=x86_64 -ba SPECS/oec.spec
    - name: Move RPM Package
      run: mv ~/rpmbuild/RPMS/x86_64/opsgenie-${{ env.INTEGRATION_NAME }}-${{ env.INTEGRATION_VERSION }}-1.x86_64.rpm .release/oec-rpm/opsgenie-${{ env.INTEGRATION_NAME }}-${{ env.INTEGRATION_VERSION }}.x86_64.rpm
    - name: Upload RPM Artifact
      uses: actions/upload-artifact@v2
      with:
        name: RPM Artifact
        path: .release/oec-rpm/opsgenie-${{ env.INTEGRATION_NAME }}-${{ env.INTEGRATION_VERSION }}.x86_64.rpm
    - name: Upload RPM
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.setup.outputs.upload_url }}
        asset_path: .release/oec-rpm/opsgenie-${{ env.INTEGRATION_NAME }}-${{ env.INTEGRATION_VERSION }}.x86_64.rpm
        asset_name: opsgenie-${{ env.INTEGRATION_NAME }}-${{ env.INTEGRATION_VERSION }}.x86_64.rpm
        asset_content_type: application/octet-stream
